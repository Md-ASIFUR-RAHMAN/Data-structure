class Node:
    def __init__(self, value):# constructor
        self.next = None
        self.prev = None
        self.val = value


class doublelylinklist:
    def __init__(self):

        self.head = None
        self.tail = None
        #self.count = 0

    def insert(self, val):
        node = Node(val)

        if self.tail is None:
            self.head = node
            self.tail = node
            #self.count += 1

        else:

            self.tail.next = node
            node.prev = self.tail
            self.tail = node
            #self.count += 1


    def add_first(self, val):


        node = Node(val)


        node.next = self.head
        node.prev = None


        if self.head is not None:
            self.head.prev = node


        self.head = node



    def add_last(self, new_data):

        node = Node(new_data)
        last = self.head


        node.next = None


        if self.head is None:
            node.prev = None
            self.head = node
            return


        while (last.next is not None):
            last = last.next


        last.next = node

        node.prev = last



    def remove_node(self,node):
        if node.prev is None:
            self.head = node.next

        else:
            node.prev.next = node.next

        if node.next is None:
            self.tail = node.prev

        else:
            node.next.prev = node.prev

    def remove(self,value):
        node = self.head

        while node is not None:
            if node.val == value:
                self.remove_node(node)

            node = node.next


    def remove_first(self):

        while self.head is not None:
            self.remove_node(self.head)
            break


    def remove_last(self):

        while self.tail is not None:
            self.remove_node(self.tail)
            break


    def search(self,value):
        ar = []
        node = self.head
        while node is not None:
            ar.append(node.val)
            if node.val == value:
                print(ar.index(value))

            node = node.next


    def update(self,value,valu):
        node = self.head
        while node is not None:
            if node.val == value:# 4
                node.val =valu # 10
                break

            node = node.next



    def __str__(self):
        vals = []
        node = self.head
        while node is not None:
            vals.append(node.val)
            node = node.next
        return f"[{', '.join(str(val) for val in vals)}]"



doubly= doublelylinklist()

insert_input = int(input(" how many element you want to add : "))
for i in range(insert_input):
    insertt = int(input("Insert an element : "))

    doubly.insert(insertt)
print(doubly)

insert_input = int(input("how many element you want to add in head : "))


for i in range(insert_input):
    insertt = int(input("Insert an element : "))

    doubly.add_first(insertt)
print(doubly)


insert_input = int(input(" how many element you want to add in tail : "))
for i in range(insert_input):
    insertt = int(input("Insert an element : "))

    doubly.add_last(insertt)
print(doubly)

insert_input = int(input(" how many element you want to remove : "))
for i in range(insert_input):
    insertt = int(input("Insert an element : "))

    doubly.remove(insertt)
print(doubly)

insert_input = int(input("how many element you want to update : "))
for i in range(insert_input):
    insertt1 = int(input("Insert an element : "))
    insertt = int(input("Insert an element : "))

    doubly.update(insertt1,insertt)
print(doubly)

insert_input = int(input("how many element you want to add in search : "))
for i in range(insert_input):
    insertt = int(input("Insert an element : "))

    doubly.search(insertt)
print(doubly)


doubly.remove_first()
print("remove_first Node :",doubly)
doubly.remove_last()
print("remove_last Node :",doubly)
